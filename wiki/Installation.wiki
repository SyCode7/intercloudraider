#summary how to install InterCloud RAIDer.

== Download ==

The source code of the !InterCloud RAIDer can be downloaded by following the instructions in the [https://code.google.com/p/intercloudraider/source/checkout Source tab].

== Prerequisites ==

!InterCloud RAIDer makes use of some free lightweight libraries in its implementation.

=== Qt ===

The implementation of !InterCloud RAIDer is developed under the [http://qt.digia.com/ Qt/C++] framework. If you want to make any modification and improve the original code, or run !InterCloud RAIDer by using the original source code, please download [http://qt-project.org/downloads Qt4.8]. The current version of InterCloudRAIDer does not support Qt5.0+.
 
=== PolarSSL ===

The Provable Data Possession (PDP) mechanism of !InterCloud RAIDer is using [https://polarssl.org/ PolarSSL] in its algorithms. Since each cipher and hashing algorithm in PolarSSL (AES, MD5, SHA-1, etc.) is self-contained and can be easily reused as a standalone module, we used a modified version of PolarSSL which only including the implementation of [https://polarssl.org/aes-source-code AES] and a version of random number generator, i.e., [https://polarssl.org/ctr-drbg-source-code CTR-DRBG].

The modified version (based on [https://polarssl.org/download-archive version 1.2.8]) including the following files:
 # `aes.h` and `aes.c`
 # `ctr_drbg.h` and `ctr_drbg.c`
 # `entropy.h` and `entropy.c`
 # `entropy_poll.h` and `entropy_poll.c`
 # `sha4.h` and `sha4.c`

If there is any linking error that is related to `<wincrypt.h>`, which is used in `entropy_poll.c`, when running !InterCloud RAIDer on your platform, the following library is built for the implementation of `<wincrypt.h>` by using Qt:
 # `advapi32_export.h`
 # `advapi32.lib`
 # `advapi32.dll`

=== QJson ===

[http://qjson.sourceforge.net/ QJson] is a Qt-based library that maps [http://www.json.org/ JSON] data to [http://qt-project.org/doc/qt-5.0/qtcore/qvariant.html QVariant] objects and vice versa. Since the network module of !InterCloud RAIDer only need to parse the JSON object that is receiving from cloud services when making network requests, we used a modified version of QJson library that is able to use the [http://qjson.sourceforge.net/usage parsing feature].

The modified version including the following files:
 # `parser.h`
 # `qjson_export.h`
 # `qjson0.lib`
 # `qjson0.dll`

The QJson library (`qjson_export.h`, `qjson0.lib` and `qjson0.dll`) is built dynamically by using Qt framework. 

== Compiling and Running by Source Code ==

=== Step1 : Compiling ===

After downloading the [http://qt-project.org/downloads Qt SDK of version 4.8 or above], please follow the following steps to build !InterCloud RAIDer:
 # Run the file `InterCloudRAIDer.pro` in the downloaded package of !InterCloud RAIDer by using [http://qt-project.org/doc/qtcreator-2.8/ Qt Creator]. The project *InterCloudRAIDer* is now loaded to your Qt Creator. 
 # In the sidebar on the left, select *Projects*, and modify your build directory to a correct path under the group box entitled *General*.
 # Press Ctrl + B to build. 

=== Step2 : Running ===

After building the !InterCloud RAIDer, press Ctrl + R to run.

== Code Structure ==

The important classes and packages in the code are:
 # `CoreEngines` - contains main classes for executing the core features of !InterCloud RAIDer, e.g., *data deduplication*, *erasure coding* and *PDP*.
 # `DBContr` - contains classes for manipulating the local database of !InterCloud RAIDer. The database is written in [http://www.sqlite.org/ SQLite3] by using the [http://qt-project.org/doc/qt-4.8/qtsql.html internal library of Qt].
 # `NetworkContr` - contains classes for handling all network requests making to cloud services, i.e., [ManualPage#Authorization_Protocol authorization protocol], uploading, downloading and deleting. 
 # `GUI` - contains classes for managing the graphical user interface of !InterCloud RAIDer.